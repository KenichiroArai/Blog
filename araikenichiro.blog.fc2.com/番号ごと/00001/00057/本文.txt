# フロントエンド（TS、JS）の22日目

## 本文

<h3>今日のまとめ</h3>
<br>
<p>
主な学習内容は、Express Validatorを使ったバリデーションの実施でした。
</p>
<br>
<h3>今日の成果</h3>
<br>
<p>
『Node.js 超入門』 　290/451=64.30%<br>
</p>
<br>
<h3>今日の小話</h3>
<br>
<p>
バリデーションは、Webシステムの重要な機能である。<br>
だが、バリデーションは項目のチェック処理のため、さらに一般的なチェックが必要である。本来は、バリデーションと言う言葉からどちらも含まれるが、僕は分けていた。<br>
</p>
<br>
<p>
バリデーションは、1項目についてのチェックのみを指して、それ以外を一般的なチェックという分類にしている。<br>
バリデーションであれば、本書の通り、必須、最小文字数、最大文字数、メールアドレス、数値、日付、時間などのチェックを指しておりその項目内で完結出来るチェックである。<br>
</p>
<br>
<p>
一方、それ以外の一般的なチェックは、その項目だけでは収まらないチェックや複雑なチェックを指して僕は下記のように分けていた。
</p>
<ul>
<li>重複チェック</li>
<li>存在チェック</li>
<li>項目間の整合性チェック（同レコード別カラム同士のチェック、別レコード同士のチェック。例えば、条件付き必須や重複など）</li>
<li>他テーブルとの整合性チェック</li>
<li>その他の複合的なチェック（正規表現では複雑になる1項目内でもバッグエンドで行う。例えば、部署ごとロールごと、ワークフローによるチェックなど、多岐に渡る）</li>
</ul>
<br>
<p>
ちなみに、フロントエンド側のバリデーションは、僕らのところではライブバリデーションやリアルタイムバリデーションと呼び、バックエンド側のバリデーションは、ドメインバリデーションと呼び、分けていた。<br>
</p>
<br>
<h3>前回のリンク</h3>
<br>
<p>
<a href="http://araikenichiro.blog.fc2.com/blog-entry-53.html" target="_blank">フロントエンド（TS、JS）の21日目</a>
</p>
<br>
